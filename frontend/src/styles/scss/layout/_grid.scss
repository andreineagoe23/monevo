// _grid.scss - Custom grid and responsive layout settings

// Custom container classes
.container-fluid {
  width: 100%;
  padding-right: map-get($spacers, 3);
  padding-left: map-get($spacers, 3);
  margin-right: auto;
  margin-left: auto;
}

.container {
  width: 100%;
  padding-right: map-get($spacers, 3);
  padding-left: map-get($spacers, 3);
  margin-right: auto;
  margin-left: auto;
  
  @each $breakpoint, $container-max-width in $container-max-widths {
    @include media-breakpoint-up($breakpoint) {
      max-width: $container-max-width;
    }
  }
}

.container-narrow {
  @extend .container;
  max-width: 1320px;
}

// Flex grid utilities
.row {
  display: flex;
  flex-wrap: wrap;
  margin-right: -#{map-get($spacers, 3)};
  margin-left: -#{map-get($spacers, 3)};
}

// Grid layout utilities
.app-layout {
  display: flex;
  min-height: 100vh;
  position: relative;
  background-color: var(--bg-color);
}

// Content styling is now maintained in _app-layout.scss to avoid duplication

// Grid gap utilities
.gap-1 { gap: map-get($spacers, 1); }
.gap-2 { gap: map-get($spacers, 2); }
.gap-3 { gap: map-get($spacers, 3); }
.gap-4 { gap: map-get($spacers, 4); }
.gap-5 { gap: map-get($spacers, 5); }

// Responsive spacing helpers
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    .min-vh-#{$breakpoint} {
      min-height: 100vh;
    }
    
    .h-#{$breakpoint}-100 {
      height: 100%;
    }
    
    .d-#{$breakpoint}-flex {
      display: flex;
    }
    
    .flex-#{$breakpoint}-row {
      flex-direction: row;
    }
    
    .flex-#{$breakpoint}-column {
      flex-direction: column;
    }
  }
}

// Column system
@for $i from 1 through 12 {
  .col-#{$i} {
    flex: 0 0 auto;
    width: percentage($i / 12);
  }
}

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    @for $i from 1 through 12 {
      .col-#{$breakpoint}-#{$i} {
        flex: 0 0 auto;
        width: percentage($i / 12);
      }
    }
  }
}

// Grid card layout system
.grid-cards {
  display: grid;
  gap: map-get($spacers, 4);
  
  &.grid-1 {
    grid-template-columns: 1fr;
  }
  
  &.grid-2 {
    grid-template-columns: 1fr;
    
    @include media-breakpoint-up(md) {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  &.grid-3 {
    grid-template-columns: 1fr;
    
    @include media-breakpoint-up(md) {
      grid-template-columns: repeat(2, 1fr);
    }
    
    @include media-breakpoint-up(lg) {
      grid-template-columns: repeat(3, 1fr);
    }
  }
  
  &.grid-4 {
    grid-template-columns: 1fr;
    
    @include media-breakpoint-up(md) {
      grid-template-columns: repeat(2, 1fr);
    }
    
    @include media-breakpoint-up(lg) {
      grid-template-columns: repeat(4, 1fr);
    }
  }
}

// Auto-fit grid for dynamic content
.grid-auto-fit {
  display: grid;
  gap: map-get($spacers, 4);
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
}